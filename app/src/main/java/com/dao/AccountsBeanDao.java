package com.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gsww.www.accountbook.bean.AccountsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNTS_BEAN".
*/
public class AccountsBeanDao extends AbstractDao<AccountsBean, Long> {

    public static final String TABLENAME = "ACCOUNTS_BEAN";

    /**
     * Properties of entity AccountsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CostName = new Property(1, String.class, "costName", false, "COST_NAME");
        public final static Property CostDate = new Property(2, String.class, "costDate", false, "COST_DATE");
        public final static Property CostPrice = new Property(3, Long.class, "costPrice", false, "COST_PRICE");
    }


    public AccountsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AccountsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNTS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COST_NAME\" TEXT," + // 1: costName
                "\"COST_DATE\" TEXT," + // 2: costDate
                "\"COST_PRICE\" INTEGER);"); // 3: costPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String costName = entity.getCostName();
        if (costName != null) {
            stmt.bindString(2, costName);
        }
 
        String costDate = entity.getCostDate();
        if (costDate != null) {
            stmt.bindString(3, costDate);
        }
 
        Long costPrice = entity.getCostPrice();
        if (costPrice != null) {
            stmt.bindLong(4, costPrice);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String costName = entity.getCostName();
        if (costName != null) {
            stmt.bindString(2, costName);
        }
 
        String costDate = entity.getCostDate();
        if (costDate != null) {
            stmt.bindString(3, costDate);
        }
 
        Long costPrice = entity.getCostPrice();
        if (costPrice != null) {
            stmt.bindLong(4, costPrice);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountsBean readEntity(Cursor cursor, int offset) {
        AccountsBean entity = new AccountsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // costName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // costDate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // costPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCostName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCostDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCostPrice(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
